{ PDP-11 command decode,
  based on the PDP-11/03 emulator written by Ovsienko V.A. }

unit Decoder;


interface

  function Make_DC0 : word;	{ command decode entry point }


implementation

  uses Def, Exec;

  type Func1 = function : word;

  function Make_DC1 : word;
  const dtab: array[0..255] of pointer = (
	@Make_HALT,
	@Make_WAIT,
	@Make_RTI,
	@Make_BPT,
	@Make_IOT,
	@Make_RESET,
	@Make_RTT,
	@Make_TRAP10,
	@Make_GO,
	@Make_GO,
	@Make_GO,
	@Make_GO,
	@Make_STEP,
	@Make_STEP,
	@Make_STEP,
	@Make_STEP,
	@Make_RSEL,
	@Make_MFUS,
	@Make_RCPC,
	@Make_RCPC,
	@Make_RCPS,
	@Make_RCPS,
	@Make_RCPS,
	@Make_RCPS,
	@Make_RSEL,
	@Make_MTUS,
	@Make_WCPC,
	@Make_WCPC,
	@Make_WCPS,
	@Make_WCPS,
	@Make_WCPS,
	@Make_WCPS,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_JMP,
	@Make_RTS,
	@Make_RTS,
	@Make_RTS,
	@Make_RTS,
	@Make_RTS,
	@Make_RTS,
	@Make_RTS,
	@Make_RTS,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_CLC,
	@Make_CLC,
	@Make_CLC,
	@Make_CLC,
	@Make_CLC,
	@Make_CLC,
	@Make_CLC,
	@Make_CLC,
	@Make_CLC,
	@Make_CLC,
	@Make_CLC,
	@Make_CLC,
	@Make_CLC,
	@Make_CLC,
	@Make_CLC,
	@Make_CLC,
	@Make_SEC,
	@Make_SEC,
	@Make_SEC,
	@Make_SEC,
	@Make_SEC,
	@Make_SEC,
	@Make_SEC,
	@Make_SEC,
	@Make_SEC,
	@Make_SEC,
	@Make_SEC,
	@Make_SEC,
	@Make_SEC,
	@Make_SEC,
	@Make_SEC,
	@Make_SEC,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB,
	@Make_SWAB	);
  begin
    Make_DC1 := Func1 (dtab[code]) ();	{ Hi(code) = 0 }
  end {Make_DC1};


  function Make_DC2 : word;
  const dtab: array[0..3] of pointer =
	(@Make_CLR, @Make_COM, @Make_INC, @Make_DEC);
  begin
    Make_DC2 := Func1 (dtab[(code shr 6) and 3]) ();
  end {Make_DC2};


  function Make_DC3 : word;
  const dtab: array[0..3] of pointer =
	(@Make_NEG, @Make_ADC, @Make_SBC, @Make_TST);
  begin
    Make_DC3 := Func1 (dtab[(code shr 6) and 3]) ();
  end {Make_DC3};


  function Make_DC4 : word;
  const dtab: array[0..3] of pointer =
	(@Make_ROR, @Make_ROL, @Make_ASR, @Make_ASL);
  begin
    Make_DC4 := Func1 (dtab[(code shr 6) and 3]) ();
  end {Make_DC4};


  function Make_DC5 : word;
  const dtab: array[0..3] of pointer =
	(@Make_MARK, @Make_TRAP10, @Make_TRAP10, @Make_SXT);
  begin
    Make_DC5 := Func1 (dtab[(code shr 6) and 3]) ();
  end {Make_DC5};


  function Make_DC6 : word;
  const dtab: array[0..3] of pointer =
	(@Make_CLRB, @Make_COMB, @Make_INCB, @Make_DECB);
  begin
    Make_DC6 := Func1 (dtab[(code shr 6) and 3]) ();
  end {Make_DC6};


  function Make_DC7 : word;
  const dtab: array[0..3] of pointer =
	(@Make_NEGB, @Make_ADCB, @Make_SBCB, @Make_TSTB);
  begin
    Make_DC7 := Func1 (dtab[(code shr 6) and 3]) ();
  end {Make_DC7};


  function Make_DC8 : word;
  const dtab: array[0..3] of pointer =
	(@Make_RORB, @Make_ROLB, @Make_ASRB, @Make_ASLB);
  begin
    Make_DC8 := Func1 (dtab[(code shr 6) and 3]) ();
  end {Make_DC8};


  function Make_DC9 : word;
  const dtab: array[0..3] of pointer =
	(@Make_MTPS, @Make_TRAP10, @Make_TRAP10, @Make_MFPS);
  begin
    Make_DC9 := Func1 (dtab[(code shr 6) and 3]) ();
  end {Make_DC9};


  function Make_DC0 : word;
  const dtab: array[0..255] of pointer = (
	@Make_DC1,
	@Make_BR,
	@Make_BNE,
	@Make_BEQ,
	@Make_BGE,
	@Make_BLT,
	@Make_BGT,
	@Make_BLE,
	@Make_JSR,
	@Make_JSR,
	@Make_DC2,
	@Make_DC3,
	@Make_DC4,
	@Make_DC5,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_MOV,
	@Make_MOV,
	@Make_MOV,
	@Make_MOV,
	@Make_MOV,
	@Make_MOV,
	@Make_MOV,
	@Make_MOV,
	@Make_MOV,
	@Make_MOV,
	@Make_MOV,
	@Make_MOV,
	@Make_MOV,
	@Make_MOV,
	@Make_MOV,
	@Make_MOV,
	@Make_CMP,
	@Make_CMP,
	@Make_CMP,
	@Make_CMP,
	@Make_CMP,
	@Make_CMP,
	@Make_CMP,
	@Make_CMP,
	@Make_CMP,
	@Make_CMP,
	@Make_CMP,
	@Make_CMP,
	@Make_CMP,
	@Make_CMP,
	@Make_CMP,
	@Make_CMP,
	@Make_BIT,
	@Make_BIT,
	@Make_BIT,
	@Make_BIT,
	@Make_BIT,
	@Make_BIT,
	@Make_BIT,
	@Make_BIT,
	@Make_BIT,
	@Make_BIT,
	@Make_BIT,
	@Make_BIT,
	@Make_BIT,
	@Make_BIT,
	@Make_BIT,
	@Make_BIT,
	@Make_BIC,
	@Make_BIC,
	@Make_BIC,
	@Make_BIC,
	@Make_BIC,
	@Make_BIC,
	@Make_BIC,
	@Make_BIC,
	@Make_BIC,
	@Make_BIC,
	@Make_BIC,
	@Make_BIC,
	@Make_BIC,
	@Make_BIC,
	@Make_BIC,
	@Make_BIC,
	@Make_BIS,
	@Make_BIS,
	@Make_BIS,
	@Make_BIS,
	@Make_BIS,
	@Make_BIS,
	@Make_BIS,
	@Make_BIS,
	@Make_BIS,
	@Make_BIS,
	@Make_BIS,
	@Make_BIS,
	@Make_BIS,
	@Make_BIS,
	@Make_BIS,
	@Make_BIS,
	@Make_ADD,
	@Make_ADD,
	@Make_ADD,
	@Make_ADD,
	@Make_ADD,
	@Make_ADD,
	@Make_ADD,
	@Make_ADD,
	@Make_ADD,
	@Make_ADD,
	@Make_ADD,
	@Make_ADD,
	@Make_ADD,
	@Make_ADD,
	@Make_ADD,
	@Make_ADD,
	@Make_MUL,
	@Make_MUL,
	@Make_DIV,
	@Make_DIV,
	@Make_ASH,
	@Make_ASH,
	@Make_ASHC,
	@Make_ASHC,
	@Make_XOR,
	@Make_XOR,
	@Make_FIS,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_SOB,
	@Make_SOB,
	@Make_BPL,
	@Make_BMI,
	@Make_BHI,
	@Make_BLOS,
	@Make_BVC,
	@Make_BVS,
	@Make_BCC,
	@Make_BCS,
	@Make_EMT,
	@Make_TRAP,
	@Make_DC6,
	@Make_DC7,
	@Make_DC8,
	@Make_DC9,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_MOVB,
	@Make_MOVB,
	@Make_MOVB,
	@Make_MOVB,
	@Make_MOVB,
	@Make_MOVB,
	@Make_MOVB,
	@Make_MOVB,
	@Make_MOVB,
	@Make_MOVB,
	@Make_MOVB,
	@Make_MOVB,
	@Make_MOVB,
	@Make_MOVB,
	@Make_MOVB,
	@Make_MOVB,
	@Make_CMPB,
	@Make_CMPB,
	@Make_CMPB,
	@Make_CMPB,
	@Make_CMPB,
	@Make_CMPB,
	@Make_CMPB,
	@Make_CMPB,
	@Make_CMPB,
	@Make_CMPB,
	@Make_CMPB,
	@Make_CMPB,
	@Make_CMPB,
	@Make_CMPB,
	@Make_CMPB,
	@Make_CMPB,
	@Make_BITB,
	@Make_BITB,
	@Make_BITB,
	@Make_BITB,
	@Make_BITB,
	@Make_BITB,
	@Make_BITB,
	@Make_BITB,
	@Make_BITB,

	@Make_BITB,
	@Make_BITB,

	@Make_BITB,
	@Make_BITB,
	@Make_BITB,
	@Make_BITB,
	@Make_BITB,
	@Make_BICB,
	@Make_BICB,
	@Make_BICB,
	@Make_BICB,
	@Make_BICB,
	@Make_BICB,
	@Make_BICB,
	@Make_BICB,
	@Make_BICB,
	@Make_BICB,
	@Make_BICB,
	@Make_BICB,
	@Make_BICB,
	@Make_BICB,
	@Make_BICB,
	@Make_BICB,
	@Make_BISB,
	@Make_BISB,
	@Make_BISB,
	@Make_BISB,
	@Make_BISB,
	@Make_BISB,
	@Make_BISB,
	@Make_BISB,
	@Make_BISB,
	@Make_BISB,
	@Make_BISB,
	@Make_BISB,
	@Make_BISB,
	@Make_BISB,
	@Make_BISB,
	@Make_BISB,
	@Make_SUB,
	@Make_SUB,
	@Make_SUB,
	@Make_SUB,
	@Make_SUB,
	@Make_SUB,
	@Make_SUB,
	@Make_SUB,
	@Make_SUB,
	@Make_SUB,
	@Make_SUB,
	@Make_SUB,
	@Make_SUB,
	@Make_SUB,
	@Make_SUB,
	@Make_SUB,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10,
	@Make_TRAP10	);
  begin
    Make_DC0 := Func1 (dtab[Hi(code)]) ();
  end {Make_DC0};

end.
